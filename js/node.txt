

1.AngularJs 的compile主要是做什么用的？          绑定DOM

  1.1 angularjs的服务实质上是  单例对象

      单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。

	  单例模式的要点有三个；一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。

	  angular 指令的link函数中进行dom操作和事件绑定，服务主要是封装与后台交互的数据接口提供复用性  是在compile执行后



   1.2 angularjs controller间通信最好使用  广播的方式

   1.3 依赖注入
          wiki 上的解释是：依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。
          该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖
          "没事你不要来找我，有事我会去找你"

          AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：
              value（Value 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段））
                      // 定义一个模块
                      var mainApp = angular.module("mainApp", []);

                      // 创建 value 对象 "defaultInput" 并传递数据
                      mainApp.value("defaultInput", 5);
              factory（factory 是一个函数用于返回值。在 service 和 controller 需要时创建）

              service
              provider（通过 provider 创建一个 service、factory等(配置阶段)）
              constant（constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的）
                          mainApp.constant("configParam", "constant value");

      1.4 大大减少了对DOM的访问（jquery是极大的丰富了 dom操作）

      1.5 scope
         scope:
            false(默认) 继承了父作用域的一切属性和方法，与父作用域共享了同一个model
            true   创建一个新的作用域，用父作用域的方法和属性来填充这个作用域
            {}   创建一个完全隔离的作用域，可以定于自己的属性和方法
      1.6 指令
          compile：绑定DOM
          $apply():使方法生效
          使用指令绑定监听是在link时

2.相同的域  <==>  相同的域名，端口，协议
  2.1  jsonp: 同源策略阻止从一个源加载的文档或脚本获取或设置另一个源加载的文档的属性,利用script的跨域能力(通过script的src标签来代替ajax 的url)，这就是jsonp的基础。
     $("#getJsonpByJquery").click(function () {
	    $.ajax({
	        url: 'http://localhost:2701/home/somejsonp',
	        dataType: "jsonp",
	        jsonp: "callback",
	        success: function (data) {
	            console.log(data)
	        }
	    })
    })

  2.2  document.domain(用来获取当前网页的域名) 跨域
 		 这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域
 		 比如有两个子域名：aaa.xxx.com   bbb.xxx.com
 		 可以通过document.domain在两个子域名里同时设置document.domain="xxx.com"来实现基础域名相同，从而达到跨域的目的

  2.3  window.name  
      http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html（详细介绍）

3.  e.stopPropagation()  W3C标准定义的阻止事件的冒泡 
4.  使用 for in 循环数组中的元素会枚举原型链上的所有属性，过滤这些属性的方式是使用hasOwnProperty
5.
		 (function() {
		      var a = b = 5;
		 })();   
		console.log(b);
		console.log(a);
		函数内的相当于var a=5;b=5;b没有声明就相当于全局变量
		所以结果是 5，underfind


6.  javascript的apply()和call()方向的区别

  
        func.call(this,arg1,arg2,arg3...)=func.apply(this,arguments)=this.func(arg1,arg2,arg3,...)

        1、每个函数都包含两个非继承而来的方法：apply()和call()。 
		2、他们的用途相同，都是在特定的作用域中调用函数。 
		3、接收参数方面不同，apply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。
		call()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来
		4、两个方法都是用来扩充函数赖以运行的作用域

7.  property 原型
		hasOwnProperty： 是用来判断一个对象是否有你给出名称的属性或对象。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。
		isPrototypeOf : 是用来判断要检查其原型链的对象是否存在于指定对象实例中，是则返回true，否则返回false

8. 字符串拼接

        javascript中字符串连接时用Array.join()替换 string += "xx"，换来几十倍的速度提升。

        eg： ["abc","def"].join("")     //join()如果没有参数默认为用“，”隔开

9.  变量问题

        9.1 如：var a = 10；var a = 100；a的值为100
              var a = 10；var a；a的值为10

        9.2  在全局作用域中声明的变量、函数会变成window对象的属性和方法
              使用var声明的全局变量不可删除；
              省略var声明的全局变量可删除。
              var a = 1;
              window.b = 2;
              c = 3;
              this.d = 4;
              //Object.getOwnPropertyDescriptor(object, propertyname)
              //获取指定对象的自身属性描述符。自身属性描述符是指直接在对象上定义（而非从对象的原型继承）的描述符。
              var aa = Object.getOwnPropertyDescriptor(window,'a'); //configurable:false,enumerable:true,value:2,writable:true
              var bb = Object.getOwnPropertyDescriptor(window,'b'); //configurable:true,enumerable:true,value:2,writable:true
              var cc = Object.getOwnPropertyDescriptor(window,'c'); //configurable:true,enumerable:true,value:2,writable:true
              var dd = Object.getOwnPropertyDescriptor(window,'d'); //configurable:true,enumerable:true,value:2,writable:true
              delete a; // 无法删除
              delete b; // 可删除
              delete c; // 可删除
              delete d; // 可删除

         9.3  js没有块级作用域
                var x=1;
                         if（x）{
                              var x=2;
                         }
                       console.log(x);  //x=2

                 var x=1;
                    if（x）{
                      (function(){
                         var x=2;
                      })()
                    }
                  console.log(x);  //x=1

          9.4 变量提升  （把定义在后面的东东（变量或函数）提升到前面中定义）
                    (function(){
                    var a='One';
                    var b='Two';
                    var c='Three';
                    })()

                    相当于
                    (function(){
                    var a,b,c;
                    a='One';
                    b='Two';
                    c='Three';
                    })()


 10. js异步操作

         promise对象：用来传递异步操作的信息
              Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）


 11. js判断一个对象是不是array
             var arr=new Array(1,2,3,4,5);

             alert(typeof （arr）);    //object
             alert( arr instanceof  Array)  //一般情况下是true ，但是如果在多个iframe中穿梭中这种方法检测数组就会出问题
            //正确的判断方法
            function isArray(arr){
               return Object.prototype.toString.call(arr) === "[object Array]";
            }


12.
              function Foo(){
                   var i=0;
                   return function(){
                       document.write(i++);
                   }
              }
              var f1=Foo(),
              f2=Foo();
              f1(); //0
              f1(); //1
              f2(); //0
              1.当函数被创建时，内部[scope]属性被存储，在这个属性中保存一个包含全局变量对象的作用域链。
              2.当函数被调用时，会创建一个执行环境及相应的作用域链，argument和实参为其进行初始化。
              这里f1()函数和f2()函数在调用时会创建两个执行环境，保存各自的变量对象，结果是没有关系的。而同一个函数在多次调用时返回值会被保存在同一个变量对象中。
              f1(),f2()分别创建了自己的执行环境，所以它们两个是相互独立的，执行之后都会返回一个匿名函数，这个匿名函数的作用域链被初始化为其包含函数的活动
              对象(这里也就是i)和全局变量对象，f1执行之后i并不会销毁，因为返回的匿名函数还要引用i，i仍然在内存中，所以执行两次之后i的值变成了1，而f2执行之后
              i为0


13.  flash编程

        Flash提供了ExternalInterface接口与JavaScript通信
        两个方法：call和addCallback
        作用：call让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。


14.  JavaScript this指向问题
            var myObject = {
                foo: "bar",
                func: function() {
                    var self = this;
                    console.log(this.foo);
                    console.log(self.foo);
                    (function() {
                        console.log(this.foo);
                        console.log(self.foo);
                    }());
                }
            };
            myObject.func();
            bar/bar/undefined/bar

            理解关键：方法/函数是由谁(对象) 调用 的，方法/函数内部的 this 就指向谁(该对象)；

            注意：被谁调用，不是处于谁的作用域，即使在作用域


15.AJAX  的优缺点
  工作原理：Ajax的工作原理相当于在用户和服务器之间加了—个中间层(AJAX引擎),使用户操作与服务器响应异步化。并不是所有的用户请求都提交给服务器,像—些数据验证和数据处理等都交给Ajax引擎自己来做, 只有确定需要从服务器读取新数据时再由Ajax引擎代为向服务器提交请求。
   优点： <1>无刷新更新数据（能在不刷新整个页面的前提下与服务器通信维护数据）
              <2>异步与服务器通信（优化浏览器和服务器的沟通，减少了不必要的数据传输，减少数据流量）
              <3>前端和后端负载平衡（AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能）
              <4>基于标准，支持度高
              <5>界面与应用分开（也可以说数据和呈现分离），有利于分工合作
   确定： <1>对浏览器的破坏（浏览器的前进和后退功能）
              <2>安全问题（站点脚步攻击、SQL注入攻击和基于Credentials的安全漏洞）
              <3>对搜索引擎支持较弱（如果使用不当，会增大网络数据的流量，从而降低整个系统的性能）
              <4>破坏程序的异常处理机制
              <5>不能很好的支持移动设备
              <6>

   16.js兼容处理

         16.1  IE并不是不支持setAttribute这个函数,而是不支持用setAttribute设置某些属性，例如对象属性、集合属性、事件属性，也就是说用setAttribute设置style和onclick这些属性在IE中是行不通的。为达到兼容各种浏览器的效果，可以用点符号法来设置Element的对象属性、集合属性和事件属性。
         16.2  innerText IE支持，FIREFOX不支持


   17.js中prototype(原型)和property（属性）

        prototype为类型（函数）定义动态的属性和方法，而Property为类型定义“静态”的属性和方法,返回对象类型原型的引用。







